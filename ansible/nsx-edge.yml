---
- hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
    - nsxanswer.yml
    - envanswer.yml

  tasks:
  - name: NSX Logical Switch creation
    nsx_logical_switch:
      nsxmanager_spec: "{{ nsxmanager_spec }}"
      state: present
      transportzone: "{{ tz }}"
      name: "{{ switch_name }}"
      controlplanemode: "UNICAST_MODE"
      description: "{{ description }}"
    register: create_logical_switch

  - name: Gather MOID for datastore for ESG creation
    vcenter_gather_moids:
      hostname: "{{ vcenter }}"
      username: "{{ vcenter_user }}"
      password: "{{ vcenter_pass }}"
      datacenter_name: "{{ dc }}"
      datastore_name: "{{ datastore }}"
      validate_certs: False
    register: gather_moids_ds
    tags: esg_create

  - name: Gather MOID for cluster for ESG creation
    vcenter_gather_moids:
      hostname: "{{ vcenter }}"
      username: "{{ vcenter_user }}"
      password: "{{ vcenter_pass }}"
      datacenter_name: "{{ dc }}"
      cluster_name: "{{ cluster_name }}"
      validate_certs: False
    register: gather_moids_cl
    tags: esg_create

  - name: NSX Edge creation
    nsx_edge_router:
      nsxmanager_spec: "{{ nsxmanager_spec }}"
      state: present
      name: "{{ edge_name }}"
      description: "{{ description }}"
      resourcepool_moid: "{{ gather_moids_cl.object_id }}"
      datastore_moid: "{{ gather_moids_ds.object_id }}"
      datacenter_moid: "{{ gather_moids_cl.datacenter_moid }}"
      interfaces:
        vnic0: {ip: "{{ ext_ip }}", prefix_len: 26, logical_switch: "{{ uplink }}", name: 'uplink0', iftype: 'uplink', fence_param: 'ethernet0.filter1.param1=1'}
        vnic1: {ip: '192.168.0.1', prefix_len: 20, logical_switch: "{{ switch_name }}", name: 'int0', iftype: 'internal', fence_param: 'ethernet0.filter1.param1=1'}
      default_gateway: "{{ default_route }}"
      default_gateway_vnic: '0'
      mtu: '9000'
      remote_access: 'true'
      username: 'admin'
      password: "{{ nsx_pass }}"
      firewall: 'true'
      ha_enabled: 'true'
    ignore_errors: yes
    register: create_esg
    tags: esg_create

  - name: Set default firewall rule policy
    nsx_edge_firewall:
      nsxmanager_spec: "{{ nsxmanager_spec }}"
      mode: 'set_default_action'
      edge_name: '{{ edge_name }}'
      default_action: 'accept'

  - name: Create DHCP pool on NSX Edge
    nsx_edge_dhcp:
      nsxmanager_spec: "{{ nsxmanager_spec }}"
      name: '{{ edge_name }}'
      mode: 'create_pool'
      ip_range: '{{ ip_range }}'
      subnet: '{{ netmask }}'
      default_gateway: '{{ gateway }}'
      domain_name: '{{ domain }}'
      dns_server_1: '{{ dns1_ip }}'
      dns_server_2: '{{ dns2_ip }}'
      lease_time: '{{ lease_time }}'
      next_server: '{{ tftp_server }}'
      bootfile: '{{ bootfile }}'

  - name: Create SSH Bastion host DNAT rule
    nsx_edge_nat:
      nsxmanager_spec: '{{ nsxmanager_spec }}'
      mode: 'create'
      name: '{{ edge_name }}'
      description: 'Ansible created inbound SSH rule'
      loggingEnabled: 'true'
      rule_type: 'dnat'
      vnic: '0'
      protocol: 'tcp'
      originalAddress: '10.180.138.131'
      originalPort: '22'
      translatedAddress: '192.168.0.2'
      translatedPort: '22'

  - name: Create default outbound SNAT rule
    nsx_edge_nat:
      nsxmanager_spec: '{{ nsxmanager_spec }}'
      mode: 'create'
      name: '{{ edge_name }}'
      description: 'Ansible created default outbound rule'
      loggingEnabled: 'true'
      rule_type: 'snat'
      vnic: '0'
      protocol: 'any'
      originalAddress: '192.168.0.0/20'
      originalPort: 'any'
      translatedAddress: '10.180.138.131'
      translatedPort: 'any'
